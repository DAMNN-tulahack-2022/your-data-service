// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sup_adm_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YourAdminServiceClient is the client API for YourAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YourAdminServiceClient interface {
	SkillsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SkillsListResponse, error)
	SkillAdd(ctx context.Context, in *SkillAddRequest, opts ...grpc.CallOption) (*Skill, error)
	SkillEdit(ctx context.Context, in *SkillEditRequest, opts ...grpc.CallOption) (*Skill, error)
	SkillRemove(ctx context.Context, in *SkillRemoveRequest, opts ...grpc.CallOption) (*SkillRemoveResponse, error)
	VacanciesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VacanciesListResponse, error)
	VacancyAdd(ctx context.Context, in *VacancyAddRequest, opts ...grpc.CallOption) (*Vacancy, error)
	VacancyEdit(ctx context.Context, in *VacancyEditRequest, opts ...grpc.CallOption) (*Vacancy, error)
	VacancyRemove(ctx context.Context, in *VacancyRemoveRequest, opts ...grpc.CallOption) (*VacancyRemoveResponse, error)
	MatrixList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MatrixListResponse, error)
	MatrixAdd(ctx context.Context, in *MatrixAddRequest, opts ...grpc.CallOption) (*Matrix, error)
	MatrixEdit(ctx context.Context, in *MatrixEditRequest, opts ...grpc.CallOption) (*Matrix, error)
	MatrixRemove(ctx context.Context, in *MatrixRemoveRequest, opts ...grpc.CallOption) (*MatrixRemoveResponse, error)
	GradesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GradesListResponse, error)
	GradeAdd(ctx context.Context, in *GradeAddRequest, opts ...grpc.CallOption) (*Grade, error)
	GradeEdit(ctx context.Context, in *GradeEditRequest, opts ...grpc.CallOption) (*Grade, error)
	GradeRemove(ctx context.Context, in *GradeRemoveRequest, opts ...grpc.CallOption) (*GradeRemoveResponse, error)
	ProjectAdd(ctx context.Context, in *ProjectAddRequest, opts ...grpc.CallOption) (*Project, error)
	DataLib(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataLibResponse, error)
	UpUserExp(ctx context.Context, in *UpUserExpRequest, opts ...grpc.CallOption) (*User, error)
	ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostResponse, error)
	PublicPost(ctx context.Context, in *PublicPostRequest, opts ...grpc.CallOption) (*PublicPostResponse, error)
}

type yourAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYourAdminServiceClient(cc grpc.ClientConnInterface) YourAdminServiceClient {
	return &yourAdminServiceClient{cc}
}

func (c *yourAdminServiceClient) SkillsList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SkillsListResponse, error) {
	out := new(SkillsListResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/SkillsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) SkillAdd(ctx context.Context, in *SkillAddRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/SkillAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) SkillEdit(ctx context.Context, in *SkillEditRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/SkillEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) SkillRemove(ctx context.Context, in *SkillRemoveRequest, opts ...grpc.CallOption) (*SkillRemoveResponse, error) {
	out := new(SkillRemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/SkillRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) VacanciesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VacanciesListResponse, error) {
	out := new(VacanciesListResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/VacanciesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) VacancyAdd(ctx context.Context, in *VacancyAddRequest, opts ...grpc.CallOption) (*Vacancy, error) {
	out := new(Vacancy)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/VacancyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) VacancyEdit(ctx context.Context, in *VacancyEditRequest, opts ...grpc.CallOption) (*Vacancy, error) {
	out := new(Vacancy)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/VacancyEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) VacancyRemove(ctx context.Context, in *VacancyRemoveRequest, opts ...grpc.CallOption) (*VacancyRemoveResponse, error) {
	out := new(VacancyRemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/VacancyRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) MatrixList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MatrixListResponse, error) {
	out := new(MatrixListResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/MatrixList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) MatrixAdd(ctx context.Context, in *MatrixAddRequest, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/MatrixAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) MatrixEdit(ctx context.Context, in *MatrixEditRequest, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/MatrixEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) MatrixRemove(ctx context.Context, in *MatrixRemoveRequest, opts ...grpc.CallOption) (*MatrixRemoveResponse, error) {
	out := new(MatrixRemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/MatrixRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) GradesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GradesListResponse, error) {
	out := new(GradesListResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/GradesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) GradeAdd(ctx context.Context, in *GradeAddRequest, opts ...grpc.CallOption) (*Grade, error) {
	out := new(Grade)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/GradeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) GradeEdit(ctx context.Context, in *GradeEditRequest, opts ...grpc.CallOption) (*Grade, error) {
	out := new(Grade)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/GradeEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) GradeRemove(ctx context.Context, in *GradeRemoveRequest, opts ...grpc.CallOption) (*GradeRemoveResponse, error) {
	out := new(GradeRemoveResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/GradeRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) ProjectAdd(ctx context.Context, in *ProjectAddRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/ProjectAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) DataLib(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataLibResponse, error) {
	out := new(DataLibResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/DataLib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) UpUserExp(ctx context.Context, in *UpUserExpRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/UpUserExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostResponse, error) {
	out := new(ReadPostResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/ReadPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourAdminServiceClient) PublicPost(ctx context.Context, in *PublicPostRequest, opts ...grpc.CallOption) (*PublicPostResponse, error) {
	out := new(PublicPostResponse)
	err := c.cc.Invoke(ctx, "/proto.YourAdminService/PublicPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YourAdminServiceServer is the server API for YourAdminService service.
// All implementations must embed UnimplementedYourAdminServiceServer
// for forward compatibility
type YourAdminServiceServer interface {
	SkillsList(context.Context, *emptypb.Empty) (*SkillsListResponse, error)
	SkillAdd(context.Context, *SkillAddRequest) (*Skill, error)
	SkillEdit(context.Context, *SkillEditRequest) (*Skill, error)
	SkillRemove(context.Context, *SkillRemoveRequest) (*SkillRemoveResponse, error)
	VacanciesList(context.Context, *emptypb.Empty) (*VacanciesListResponse, error)
	VacancyAdd(context.Context, *VacancyAddRequest) (*Vacancy, error)
	VacancyEdit(context.Context, *VacancyEditRequest) (*Vacancy, error)
	VacancyRemove(context.Context, *VacancyRemoveRequest) (*VacancyRemoveResponse, error)
	MatrixList(context.Context, *emptypb.Empty) (*MatrixListResponse, error)
	MatrixAdd(context.Context, *MatrixAddRequest) (*Matrix, error)
	MatrixEdit(context.Context, *MatrixEditRequest) (*Matrix, error)
	MatrixRemove(context.Context, *MatrixRemoveRequest) (*MatrixRemoveResponse, error)
	GradesList(context.Context, *emptypb.Empty) (*GradesListResponse, error)
	GradeAdd(context.Context, *GradeAddRequest) (*Grade, error)
	GradeEdit(context.Context, *GradeEditRequest) (*Grade, error)
	GradeRemove(context.Context, *GradeRemoveRequest) (*GradeRemoveResponse, error)
	ProjectAdd(context.Context, *ProjectAddRequest) (*Project, error)
	DataLib(context.Context, *emptypb.Empty) (*DataLibResponse, error)
	UpUserExp(context.Context, *UpUserExpRequest) (*User, error)
	ReadPost(context.Context, *ReadPostRequest) (*ReadPostResponse, error)
	PublicPost(context.Context, *PublicPostRequest) (*PublicPostResponse, error)
	mustEmbedUnimplementedYourAdminServiceServer()
}

// UnimplementedYourAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYourAdminServiceServer struct {
}

func (UnimplementedYourAdminServiceServer) SkillsList(context.Context, *emptypb.Empty) (*SkillsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillsList not implemented")
}
func (UnimplementedYourAdminServiceServer) SkillAdd(context.Context, *SkillAddRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillAdd not implemented")
}
func (UnimplementedYourAdminServiceServer) SkillEdit(context.Context, *SkillEditRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillEdit not implemented")
}
func (UnimplementedYourAdminServiceServer) SkillRemove(context.Context, *SkillRemoveRequest) (*SkillRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillRemove not implemented")
}
func (UnimplementedYourAdminServiceServer) VacanciesList(context.Context, *emptypb.Empty) (*VacanciesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacanciesList not implemented")
}
func (UnimplementedYourAdminServiceServer) VacancyAdd(context.Context, *VacancyAddRequest) (*Vacancy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacancyAdd not implemented")
}
func (UnimplementedYourAdminServiceServer) VacancyEdit(context.Context, *VacancyEditRequest) (*Vacancy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacancyEdit not implemented")
}
func (UnimplementedYourAdminServiceServer) VacancyRemove(context.Context, *VacancyRemoveRequest) (*VacancyRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VacancyRemove not implemented")
}
func (UnimplementedYourAdminServiceServer) MatrixList(context.Context, *emptypb.Empty) (*MatrixListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatrixList not implemented")
}
func (UnimplementedYourAdminServiceServer) MatrixAdd(context.Context, *MatrixAddRequest) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatrixAdd not implemented")
}
func (UnimplementedYourAdminServiceServer) MatrixEdit(context.Context, *MatrixEditRequest) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatrixEdit not implemented")
}
func (UnimplementedYourAdminServiceServer) MatrixRemove(context.Context, *MatrixRemoveRequest) (*MatrixRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatrixRemove not implemented")
}
func (UnimplementedYourAdminServiceServer) GradesList(context.Context, *emptypb.Empty) (*GradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradesList not implemented")
}
func (UnimplementedYourAdminServiceServer) GradeAdd(context.Context, *GradeAddRequest) (*Grade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeAdd not implemented")
}
func (UnimplementedYourAdminServiceServer) GradeEdit(context.Context, *GradeEditRequest) (*Grade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeEdit not implemented")
}
func (UnimplementedYourAdminServiceServer) GradeRemove(context.Context, *GradeRemoveRequest) (*GradeRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeRemove not implemented")
}
func (UnimplementedYourAdminServiceServer) ProjectAdd(context.Context, *ProjectAddRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectAdd not implemented")
}
func (UnimplementedYourAdminServiceServer) DataLib(context.Context, *emptypb.Empty) (*DataLibResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataLib not implemented")
}
func (UnimplementedYourAdminServiceServer) UpUserExp(context.Context, *UpUserExpRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpUserExp not implemented")
}
func (UnimplementedYourAdminServiceServer) ReadPost(context.Context, *ReadPostRequest) (*ReadPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPost not implemented")
}
func (UnimplementedYourAdminServiceServer) PublicPost(context.Context, *PublicPostRequest) (*PublicPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicPost not implemented")
}
func (UnimplementedYourAdminServiceServer) mustEmbedUnimplementedYourAdminServiceServer() {}

// UnsafeYourAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YourAdminServiceServer will
// result in compilation errors.
type UnsafeYourAdminServiceServer interface {
	mustEmbedUnimplementedYourAdminServiceServer()
}

func RegisterYourAdminServiceServer(s grpc.ServiceRegistrar, srv YourAdminServiceServer) {
	s.RegisterService(&YourAdminService_ServiceDesc, srv)
}

func _YourAdminService_SkillsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).SkillsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/SkillsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).SkillsList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_SkillAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).SkillAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/SkillAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).SkillAdd(ctx, req.(*SkillAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_SkillEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).SkillEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/SkillEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).SkillEdit(ctx, req.(*SkillEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_SkillRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).SkillRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/SkillRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).SkillRemove(ctx, req.(*SkillRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_VacanciesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).VacanciesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/VacanciesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).VacanciesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_VacancyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).VacancyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/VacancyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).VacancyAdd(ctx, req.(*VacancyAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_VacancyEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).VacancyEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/VacancyEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).VacancyEdit(ctx, req.(*VacancyEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_VacancyRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).VacancyRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/VacancyRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).VacancyRemove(ctx, req.(*VacancyRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_MatrixList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).MatrixList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/MatrixList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).MatrixList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_MatrixAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatrixAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).MatrixAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/MatrixAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).MatrixAdd(ctx, req.(*MatrixAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_MatrixEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatrixEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).MatrixEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/MatrixEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).MatrixEdit(ctx, req.(*MatrixEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_MatrixRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatrixRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).MatrixRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/MatrixRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).MatrixRemove(ctx, req.(*MatrixRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_GradesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).GradesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/GradesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).GradesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_GradeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).GradeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/GradeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).GradeAdd(ctx, req.(*GradeAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_GradeEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).GradeEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/GradeEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).GradeEdit(ctx, req.(*GradeEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_GradeRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).GradeRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/GradeRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).GradeRemove(ctx, req.(*GradeRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_ProjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).ProjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/ProjectAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).ProjectAdd(ctx, req.(*ProjectAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_DataLib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).DataLib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/DataLib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).DataLib(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_UpUserExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpUserExpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).UpUserExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/UpUserExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).UpUserExp(ctx, req.(*UpUserExpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/ReadPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).ReadPost(ctx, req.(*ReadPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourAdminService_PublicPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourAdminServiceServer).PublicPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YourAdminService/PublicPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourAdminServiceServer).PublicPost(ctx, req.(*PublicPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YourAdminService_ServiceDesc is the grpc.ServiceDesc for YourAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YourAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.YourAdminService",
	HandlerType: (*YourAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SkillsList",
			Handler:    _YourAdminService_SkillsList_Handler,
		},
		{
			MethodName: "SkillAdd",
			Handler:    _YourAdminService_SkillAdd_Handler,
		},
		{
			MethodName: "SkillEdit",
			Handler:    _YourAdminService_SkillEdit_Handler,
		},
		{
			MethodName: "SkillRemove",
			Handler:    _YourAdminService_SkillRemove_Handler,
		},
		{
			MethodName: "VacanciesList",
			Handler:    _YourAdminService_VacanciesList_Handler,
		},
		{
			MethodName: "VacancyAdd",
			Handler:    _YourAdminService_VacancyAdd_Handler,
		},
		{
			MethodName: "VacancyEdit",
			Handler:    _YourAdminService_VacancyEdit_Handler,
		},
		{
			MethodName: "VacancyRemove",
			Handler:    _YourAdminService_VacancyRemove_Handler,
		},
		{
			MethodName: "MatrixList",
			Handler:    _YourAdminService_MatrixList_Handler,
		},
		{
			MethodName: "MatrixAdd",
			Handler:    _YourAdminService_MatrixAdd_Handler,
		},
		{
			MethodName: "MatrixEdit",
			Handler:    _YourAdminService_MatrixEdit_Handler,
		},
		{
			MethodName: "MatrixRemove",
			Handler:    _YourAdminService_MatrixRemove_Handler,
		},
		{
			MethodName: "GradesList",
			Handler:    _YourAdminService_GradesList_Handler,
		},
		{
			MethodName: "GradeAdd",
			Handler:    _YourAdminService_GradeAdd_Handler,
		},
		{
			MethodName: "GradeEdit",
			Handler:    _YourAdminService_GradeEdit_Handler,
		},
		{
			MethodName: "GradeRemove",
			Handler:    _YourAdminService_GradeRemove_Handler,
		},
		{
			MethodName: "ProjectAdd",
			Handler:    _YourAdminService_ProjectAdd_Handler,
		},
		{
			MethodName: "DataLib",
			Handler:    _YourAdminService_DataLib_Handler,
		},
		{
			MethodName: "UpUserExp",
			Handler:    _YourAdminService_UpUserExp_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _YourAdminService_ReadPost_Handler,
		},
		{
			MethodName: "PublicPost",
			Handler:    _YourAdminService_PublicPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sup_adm_service.proto",
}
